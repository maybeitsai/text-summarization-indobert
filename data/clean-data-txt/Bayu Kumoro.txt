judul
IMPLEMENTASI PENYISIPAN DAN EKSTRAKSI DATA MENGGUNAKAN METODE LSB RANDOM PIXEL STEGANOGRAPHY PADA FPGA

latarbelakang
Manusia menyembunyikan informasi dengan banyak metode dan variasi. Misalnya, orang Yunani kuno menulis teks pada tablet berlapis lilin. Untuk menyampaikan pesan tersembunyi, seseorang akan mengikis lilin dari tablet, menulis pesan di kayu yang mendasarinya dan lagi menutupi tablet dengan lilin untuk membuatnya tampak kosong dan tidak digunakan. Metode lainnya adalah mencukur kepala pesan dan mentato pesan atau gambar di kepala pembawa pesan. Setelah rambut tumbuh kembali, pesan itu tidak akan terdeteksi sampai kepalanya dicukur lagi. Di awal Perang Dunia II, teknologi steganografi hampir secara eksklusif terdiri dari tinta-tinta yang tak terlihat. Sebuah surat yang tampaknya tidak terlihat mencurigakan bisa berisi pesan yang sangat berbeda dengan apa yang ditulis di antara kalimat-kalimat itu. Saat ini komunikasi internet telah menjadi bagian integral dari infrastruktur dunia saat ini. Informasi berkomunikasi datang dalam berbagai bentuk dan digunakan dalam banyak aplikasi. Dalam sejumlah besar aplikasi ini, diupayakan agar komunikasi dilakukan secara terpisah. Banyak orang salah berasumsi bahwa komunikasi mereka aman karena hanya sebagian kecil dari sejumlah besar data yang dikirim. Namun pada kenyataannya, internet bukanlah media yang aman.
Ada berbagai macam teknik untuk menyembunyikan data. Steganografi dan Kriptografi merupakan metode yang cukup populer dalam menyembunyikan suatu data. Pada kajian bidang penelitian ini, penulis (A. Altaay, S. bin Sahib, M. Zamani, 2012) mengajukan metode steganografi dibandingkan kriptografi. Keuntungan steganografi daripada kriptografi saja adalah bahwa pesan rahasia yang dimaksud tidak menarik perhatian pada dirinya sendiri sebagai objek pengawasan. Pesan terenkripsi yang terlihat jelas, tidak peduli seberapa bisa diretas, membangkitkan minat dan mungkin dalam dirinya sendiri memberatkan di negara-negara di mana enkripsi itu ilegal. Dengan kata lain, steganografi lebih bijaksana daripada kriptografi ketika kita ingin mengirim informasi rahasia. Di sisi lain, pesan tersembunyi lebih mudah diekstraksi.
Teknik steganografi berusaha menyembunyikan keberadaan data rahasia. Teknik Steganografi yang sempurna menanamkan pesan rahasia ke dalam gambar pembawa dengan keamanan yang tinggi dalam gambar. Gambar digital memiliki kemampuan tinggi untuk menyimpan informasi dan data. Informasi akan dimanipulasi yang tidak dapat dideteksi oleh mata manusia. Steganografi adalah salah satu teknik paling ampuh untuk menyembunyikan keberadaan informasi rahasia tersembunyi di dalam objek sampul.
Memasukkan informasi rahasia ke dalam gambar membutuhkan perhitungan intensif, dan dengan demikian, merancang steganografi dalam perangkat keras meningkatkan efisiensi teknik steganografi. Untuk penyembunyian data yang berhasil, suatu teknik harus menanamkan data rahasia tanpa mengubah gambar sampul dan mengekstrak informasi tersembunyi dari gambar dengan tingkat integritas pengetahuan yang tinggi.
Penyembunyian data rahasia ke dalam citra digital akan mengubah kualitas citra tersebut. Oleh karena itu, dalam membuat metode penyembunyian pesan harus memerhatikan beberapa kriteria yaitu: Fidelit, Robustness, Recovery. Pada fidelity, kualitas gambar stego tidak jauh berbeda. Setelah penambahan pesan tersembunyi, data stego masih terlihat dengan baik. Pada robustness, pesan yang disembunyikan harus tahan/kuat (robust) terhadap berbagai manipulasi yang dilakukan pada data stego karena tujuan adanya metode steganografi adalah keamanan data rahasia tersebut. Pada recovery, data yang sudah disembunyikan harus bisa dibuka kembali karena tujuan steganografi adalah penyembunyian informasi, maka akan ada waktunya informasi tersebut akan diambil lagi untuk digunakan lebih lanjut.
Pada steganografi terdapat empat metode yaitu: metode LSB (Least Significant Bit), PVD (Pixel Value Differencing), MF (Modulus Function), dan CRT (Chinese Remainder Theorem).
LSB dilakukan dengan mengambil bit - bit terakhir pada citra dan menggantinya dengan bit - bit data. Banyak cara yang dapat dilakukan untuk mengganti bit - bit warna pada citra, antara lain dengan melakukan operasi atas atau menilai nilai warna pada citra, atau juga dengan cara melakukan operasi AND dan OR antara bit - bit warna dengan bit - bit data. Tujuan utama dari LSB adalah memanipulasi nilai suatu titik warna (pixel) sehingga data dapat disembunyikan ke dalam titik warna tersebut namun perubahan yang terjadi memerlukan diminimalisasi sehingga seakan - perubahannya tidak dapat dideteksi oleh mata manusia.
PVD merupakan salah satu metode yang dapat digunakan dalam pembuatan steganografi. Metode ini meningkatkan kapasitas penyimpanan pesan yang lebih besar, dengan kualitas gambar yang lebih baik dibandingkan dengan metode lain. Untuk menambah tingkat keamanan dari informasi yang akan dimasukkan ke dalam citra, steganografi dapat digabungkan dengan enkripsi, sehingga informasi yang disisipkan tidak akan mudah dibaca oleh orang yang tidak bertanggung jawab.
Metode MF merupakan pengembangan dari metode PVD. Proses penyisipan pesan dilakukan melalui modifikasi nilai sisa hasil bagi (remainder) dari piksel tetangga. Sama seperti metode PVD, metode ini memiliki kuantisasi selisih nilai keabuan untuk menentukan jumlah bit yang akan disisipkan pada selisih nilai tertentu.
Didalam teori bilangan, dasar dari metode CRT adalah kemampuannya untuk merekontruksi bilangan bulat dengan rentang nilai tertentu dari sisa hasil baginya dalam pasangan bilangan-bilangan koprima. (Pengolahan Citra Digital, Pulung Nurtantio Andono, T.Sutojo, Muljono, 2017)
Penulis (A. Altaay, S. bin Sahib, M. Zamani, 2012) membuat tulisan gambaran seni steganografi. Mereka mendefinisikan steganografi sebagai seni menyembunyikan data di dalam file media. Juga, mereka menunjukkan perbedaan antara steganografi, watermarking dan kriptografi dan menyatakan Watermarking dan khususnya steganografi cenderung menyembunyikan keberadaan data tersembunyi sementara kriptografi membuat data menjadi omong kosong". Tulisan ini menyajikan cara untuk mengukur kualitas teknik steganografi tertentu. Pengukuran didasarkan pada tiga parameter yaitu imperceptibilitas, kapasitas dan ketahanan. Imperceptibilitas didefinisikan sebagai properti tidak dapat membedakan antara file stego dan file sampul. Kapasitas adalah jumlah maksimum data rahasia yang dapat disembunyikan oleh file sampul. Ketahanan adalah kemampuan melindungi data rahasia dari file stego. Para penulis menyatakan beberapa aplikasi steganografi yaitu "identifikasi, perlindungan hak cipta, dan anotasi".
(Thangadurai, Devi, 2012) membandingkan antara steganografi dan kriptografi. Dalam kriptografi, "enkripsi mencegah orang yang tidak berwenang menemukan konten komunikasi". Namun, dalam steganografi, itu "mencegah penemuan keberadaan komunikasi". Selain itu, penulis menggambarkan teknik LSB sebagai menyembunyikan data di dalam bit piksel yang paling tidak signifikan. Mereka menyatakan bahwa teknik LSB mudah digunakan. Padahal, data tersembunyi mudah diekstraksi oleh penyerang. Teknik LSB dapat diterapkan untuk berbagai format file seperti PNG dan GIF.
Dalam (Shamim Ahmed Laskar, 2013), penulis mengusulkan menambahkan pseudorandom number generator (PRNG) yang berfungsi untuk memilih pixel random dan menanampkan pesan tersembunyi ke gambar.
Dalam (B.J. Mohd, 2012), penulis mengusulkan implementasi steganografi menggunakan teknik LSB pada perangkat keras FPGA. FPGA menerima gambar sampul dan data rahasia, menerapkan teknik LSB dan menampilkan gambar stego. Para penulis menggunakan teknik LSB n-bit yang memungkinkan pengguna untuk memilih berapa banyak bit data rahasia yang disembunyikan per piksel. Jumlah bit berkisar dari 1 hingga 8 bit per piksel. Makalah ini menunjukkan bahwa hasil PSNR (signal to noise rasio) menurun dengan meningkatnya LSB yang digunakan.
Penulis (E. A. Elshazly, 2018) dikembangkannya metode generalized exploiting modification direction (GEMD) steganography Tulisan ini mengusulkan algoritma steganografi gambar GEMD yang dikembangkan menggunakan strategi segmentasi piksel yang ditingkatkan dengan bit indikator (PSS-IB) untuk mengatasi kelemahan dari algoritma EMD sebelumnya serta lengkap dengan data FPGA yang dipakai.
Dari uraian di atas kita dapat menyimpulkan bahwa LSB adalah metode yang sangat menarik. Metode standar LSB tidak memiliki keamanan dan kapasitas. Namun, ada metode LSB lain yang meningkatkan tingkat keamanan dan kapasitas. Selain itu, penerapan metode LSB mudah untuk ditingkatkan, dibangun dan dievaluasi.

rumusanmasalah
       Penelitian ini berusaha mengembangkan teknik dan memperkecil spesifikasi yang digunakan dalam FPGA dalam penyisipan pesan rahasia ke dalam suatu gambar 
berdasarkan metode LSB. Sehingga penelitian ini difokuskan pada:
Bagaimana mengembangkan metode penyisipan pesan LSB steganografi pada FPGA.
Bagaimana mengoptimalkan jumlah komponen, clock dan capacity pada FPGA secara efisien.
Bagaimana konsep enkripsi dan dekripsi pada algoritma Steganografi LSB dengan menggunakan bahasa perangkat keras untuk FPGA.

tujuanpenelitian
      Sesuai dengan masalah penelitian yang telah diuraikan sebelumnya, maka tujuan yang ingin dicapai dalam penelitian ini adalah:
Menghasilkan metode LSB pada FPGA.
Mengoptimalkan jumlah komponen, clock, dan capacity pada FPGA.
Menghasilkan metode penyisipan dan ekstraksi pesan rahasia pada FPGA.
Mengetahui pengaruh integritas data sebelum dan sesudah proses steganografi.
Membandingkan hasil penelitian dengan penelitian sebelumnya.

rangkumanpenelitianterkait
Penulis (Shamim Ahmed Laskar, 2013), mengusulkan sistem berhubungan dengan implementasi keamanan menggunakan steganografi yaitu, menyembunyikan sejumlah besar informasi dalam suatu gambar tanpa mengganggu kejelasan dan kualitas gambar. Dengan mengacak pendekatan penyematan melalui algoritme, perkiraan statistik sampul dapat dinonaktifkan secara efektif. Jadi penulis telah memproses embedding LSB dengan kompresi lossless. Selain itu, hasil penulis menunjukkan bahwa penyisipan LSB menggunakan generator nomor acak pseudo adalah yang terbaik dalam hal kompresi lossless. Hasil dari penelitian ini adalah membuat metode yang dapat secara efektif menyembunyikan pesan di dalam file gambar digital. Dalam penelitian ini, penulis telah menginvestigasi proses steganalisis. Penelitian ini berfokus pada pendekatan seperti meningkatkan keamanan pesan dan mengurangi tingkat distorsi. Dengan pendekatan ini, dimungkinkan untuk menanamkan pesan ke LSB piksel merah dari gambar berwarna.
Dalam (B.J. Mohd, 2012), penulis mengusulkan implementasi steganografi menggunakan teknik LSB pada perangkat keras FPGA. FPGA menerima gambar sampul dan data rahasia, menerapkan teknik LSB dan menampilkan gambar stego. Para penulis menggunakan teknik LSB n-bit yang memungkinkan pengguna untuk memilih berapa banyak bit data rahasia yang disembunyikan per piksel. Jumlah bit berkisar dari 1 hingga 8 bit per piksel. Makalah ini menunjukkan bahwa hasil PSNR (signal to noise ratio) menurun dengan meningkatnya LSB yang digunakan.

metodologipenelitian
3.1. Obyek penelitian
       Obyek penelitian ini adalah gambar RGB sebagai cover (diambil dari internet Google Image) atau gambar grayscale yang akan disisipkan pesan berupa teks.

3.2. Tahapan Penelitian
       Penelitian ini berusaha mengembangkan algoritma dan prototipe sebagai solusi dari masalah dan kekurangan dari teknik yang pernah dilakukan peneliti terdahulu yang dapat mengatasi optimasi hardware FPGA. Rencana penelitian mencoba menggabungkan mengembangkan algoritma dan mengembangkan metode yang dapat mengoptimalkan performa FPGA. Sehingga, metode untuk hasil yang diinginkan yaitu penggunaan komponen efisien, power yang digunakan lebih kecil dibandingkan penelitian sebelumnya.
       Rencana yang akan dilakukan menggunakan metode dan modifikasi pada Penelitian (Abdullah AlWatyan, 2017) dengan melakukan tahapan penyediaan pesan rahasia dan Cover Image. Dengan pesan rahasia akan dissipkan pada cover Image dengan key yang sudah dibuat pada hardware FPGA hingga menjadi Stego Image. Pada tahapan ekstraksi Stego Image akan mengambil pesa rahasia yang sudah disisipkan dengan key yang sudah dibuat. Kemudian, Stego Image akan menjadi pesan rahasia dan Cover Image. Dan untuk mengoptimalkan hardware FPGA akan menggunakan perbandingan metode yang dilakukan peneliti (E. A. Elshazly, 2018) dengan menggunakan metode algoritma steganografi gambar GEMD.
      Pada gambar 6 menggambarkan alur hardware dari proposal. Tahap pertama dimulai dengan simulasi metode pada MATLAB. Pada MATLAB, difokuskan pada metode algoritma yang diajukan sampai dengan pengecekan kualitas stego image dan cover image. Setelah tahap MATLAB sudah selesai, dilanjutkan pada hardware FPGA. Pada FPGA, diimplementasikan algoritma yang sudah dibuat dan pengecekan kualitas gambar dilanjutkan dengan analisa energi yang digunakan FPGA. Jika energi sudah optimal, dilakukan analisa performa algoritma dan sistem secara keseluruhan.

3.3 Proses Algoritma Pemasukan Dan Ekstraksi Pesan Tersembunyi
      Pseudo-random number generator (PRNG) dapat digunakan untuk memilih piksel secara acak dan menyematkan pesan. Ini akan membuat bit pesan lebih sulit ditemukan dan mudah-mudahan mengurangi realisasi pola dalam gambar. Data dapat disembunyikan dalam LSB bidang warna tertentu (bidang merah) dari piksel yang dipilih secara acak dalam ruang warna RGB. Jika pesan jauh lebih kecil dari kapasitas gambar, masalah dapat terjadi di mana informasi akan dikemas ke dalam satu bagian gambar misalnya setengah bagian atas. Ini diselesaikan dengan menggunakan PRNG yang akan menyebarkan pesan ke seluruh gambar. Karenanya noise juga akan didistribusikan secara acak. Generator angka acak pseudo menghitung dan memilih urutan piksel yang akan dipilih untuk penyematan data berdasarkan kunci.
      Pesan yang akan disembunyikan dikonversi menjadi byte yang masing-masing karakter dalam pesan dikonversi ke ASCII-nya. Sebagai contoh jika kita mengambil karakter "A" dalam pesan maka "A" = 1000001 disimpan dalam array byte. Karena nilai ASCII untuk "A" adalah 65 dan setara biner adalah 1000001. As gambar terdiri dari kontribusi piksel dari komponen merah, hijau dan biru dan setiap piksel memiliki angka dari komponen warna (untuk gambar bitmap 24-bit masing-masing merah, hijau dan pixel biru memiliki 8 bit). Pada 8 bit dari jumlah warna, jika kita mengubah bit yang paling tidak signifikan, sistem penglihatan kita dapat mendeteksi perubahan dalam pixel dan dengan demikian dimungkinkan untuk mengganti bit pesan dengan bit pixel gambar. Misalnya jika nilai bidang merah piksel adalah 10111011, dan penulis ingin menyimpan informasi dalam bit paling tidak signifikan, pada situasi terburuk nilai piksel berubah menjadi 10111010, pemeriksaan menunjukkan bahwa HVS tidak dapat membedakan perubahan ini. Jadi kami menyimpan informasi kami ke dalam bit terkecil dari bidang merah piksel. Jika kami mengubah LSB dalam satu byte gambar, kami dapat menambah atau mengurangi satu dari nilai yang diwakilinya. Ini berarti kita dapat menimpa bit terakhir dalam byte tanpa mempengaruhi warnanya.
      Untuk menyembunyikan pesan, data terlebih dahulu dikonversi ke dalam format byte dan disimpan dalam array byte. Pesan tertanam di setiap bit ke posisi LSB dari bidang merah setiap piksel. Ia menggunakan piksel pertama (pada titik 0) untuk menyembunyikan panjang pesan (jumlah karakter). Anggap piksel asli kami sebagai bit: (r7 r6 r5 r4 r3 r2 r1 r0, g7 g6 g5 g4 g3 g2 g1 g0, b7 b6 b5 b4 b3 b2 b1 b0 b0) Selain itu, karakter kami (byte) memiliki beberapa bit: (c7 c6 c5 c4 c3 c2 c1 c0).
      Menempatkan bit karakter dalam LSB piksel merah saja alih-alih menempatkannya dalam LSB merah, hijau, dan biru. Tujuannya adalah untuk membuat pesan jauh lebih aman. Pesan disimpan dalam byte merah. Jadi piksel yang dipilih tersebar dan keamanan pesan lebih tinggi.
      Kemudian kita dapat menempatkan bit karakter di piksel merah terendah, bit karakter berikutnya di piksel merah terendah berikutnya, dan seterusnya. (r7 r6 r5 r4 r3 r2 r1 c0, g7 g6 g5 g4 g3 g2 g1 g0, b7 b6 b5 b4 b3 b2 b2 b1 b0).
      Jika kita mengambil contoh piksel (225.100.100) diwakili dalam bentuk biner (11100001, 01100100, 01100100) di mana untuk menanamkan karakter pesan "d" memiliki nilai biner 1100100 (nilai ASCII 100) kemudian setelah menanamkan bit pertama dari "d" di bidang merah pixel kita dapat memperoleh Pixel baru sebagai (224, 100.100) diwakili dalam biner (11100000, 01100100, 01100100).
      Di sini kita dapat melihat bahwa nilai piksel (225, 100.100) diubah menjadi (224.100.100). Dari percobaan dapat diamati bahwa perubahan tersebut tidak akan memiliki perbedaan warna yang nyata pada gambar. Paling buruk, nilai desimal piksel dapat bertambah atau berkurang satu. Perubahan nilai piksel seperti itu tidak memengaruhi gambar dan tidak terdeteksi.
      Proses penyematan adalah sebagai berikut.
Input: Gambar sampul, stego-key dan file teks 
Output: gambar stego
1. Ekstrak piksel gambar sampul.
2. Ekstrak karakter file teks.
3. Ekstrak karakter dari tombol Stego.
4. Pilih piksel pertama dan pilih karakter dari tombol Stego dan letakkan di komponen piksel pertama.
5. Tempatkan beberapa simbol terminating untuk menunjukkan ujung kunci. 
0 telah digunakan sebagai simbol terminating dalam algoritma ini.
6. Masukkan karakter file teks di setiap komponen pertama piksel berikutnya dengan menggantinya.
7. Ulangi langkah 6 hingga semua karakter tertanam.
8. Sekali lagi letakkan beberapa simbol terminating untuk menunjukkan akhir data.
9. Memperoleh gambar stego.
      Proses ekstraksi adalah sebagai berikut.
Input: File stego-image, stego-key 
Output: Pesan teks rahasia.
1. Ekstrak piksel gambar stego.
2. Sekarang, mulai dari piksel pertama dan ekstrak karakter kunci stego dari komponen pertama piksel.
3. Ikuti Langkah 3 hingga mengakhiri simbol, jika tidak ikuti langkah 4.
4. Jika kunci yang diekstraksi ini cocok dengan kunci yang dimasukkan oleh penerima, maka ikuti Langkah 5, jika tidak, matikan program.
5. Jika kunci sudah benar, maka pergi ke piksel berikutnya dan ekstrak karakter pesan rahasia dari komponen pertama piksel berikutnya. Ikuti Langkah 5 hingga hingga mengakhiri simbol, jika tidak ikuti langkah 6.
6. Ekstrak pesan rahasia
      Dalam proses metode pengkodean ini, kunci acak digunakan untuk mengacak gambar sampul dan kemudian menyembunyikan bit-bit pesan rahasia ke dalam bit paling tidak signifikan dari piksel dalam gambar sampul. Ujung pengirim dan penerima berbagi kunci stego dan kunci acak. Kunci acak biasanya digunakan untuk menabur generator angka acak untuk memilih lokasi piksel dalam gambar untuk menanamkan pesan rahasia.
Input: Gambar sampul, kunci stego dan pesan 
Output: gambar stego
1. Baca karakter dari file teks yang akan disembunyikan dan konversikan nilai ASCII dari karakter menjadi nilai biner yang setara menjadi array integer 8 bit.
2. Baca gambar warna RGB (gambar sampul) ke mana pesan akan tertanam.
3. Baca bit merah terakhir.
4. Inisialisasi kunci acak dan permutasi acak piksel gambar sampul dan membentuk kembali menjadi matriks.
5. Inisialisasi stego-key dan XOR dengan file teks menjadi sembunyikan dan berikan pesan.
6. Masukkan bit pesan rahasia ke LSB dari Pixel bidang merah.
7. Tulis piksel di atas ke Stego Image File.
      Dalam proses ekstraksi ini, proses pertama-tama mengambil kunci dan kemudian kunci acak. Kunci-kunci ini mengambil poin dari LSB di mana pesan rahasia didistribusikan secara acak. Proses decoding mencari bit-bit tersembunyi dari sebuah pesan rahasia ke bit paling tidak signifikan dari piksel dalam gambar sampul menggunakan kunci acak. Dalam algoritma penguraian kata kunci acak harus cocok yaitu kunci acak yang digunakan dalam pengkodean harus cocok karena kunci acak menetapkan titik-titik penyembunyian pesan dalam kasus pengkodean. Kemudian penerima dapat mengekstraksi pesan yang tertanam persis menggunakan stego-key.
      Input: File stego-image, stego-key, kunci acak.
      Output: Pesan rahasia.
1. Buka file gambar Stego dalam mode baca dan dari file Gambar, baca warna RGB dari setiap piksel.
2. Ekstrak komponen merah dari gambar host.
3. Baca bit terakhir dari setiap piksel.
4. Inisialisasi kunci acak yang memberikan posisi tombol bit pesan dalam piksel merah yang disematkan secara acak. Untuk mendekode, pilih piksel dan Ekstrak nilai LSB piksel merah.
5. Baca masing-masing piksel kemudian isi array dikonversi menjadi nilai desimal yang sebenarnya adalah nilai ASCII dari karakter tersembunyi.
6. Nilai ASCII yang didapat dari atas adalah XOR dengan stego-key dan memberikan file pesan, yang disembunyikan di dalam gambar sampul.

3.4 Pengecekan Kualitas Cover Image Dengan Stego Image
       Structural Similarity Index Metrics (SSIM) dikenal sebagai kualitas metric yang digunakan untuk mengukur kemiripan diantara 2 buah citra dan dipercaya berkorelasi dengan kualitas persepsi Human Visual System (HVS).
      Nilai SSIM berada pada rentang -1 hingga 1. Semakin tinggi nilai SSIM, maka semakin tinggi tingkat kemiripan dari 2 buah citra.